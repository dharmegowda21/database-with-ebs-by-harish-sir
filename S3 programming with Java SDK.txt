########################################
Use Java SDK to write programs to create and delete S3 buckets.
########################################

AWS S3 SDK Examples:
https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/examples-s3.html

###############################
Java Lab 1: Create an S3 bucket  
###############################

Task 1: Setup Cloud9, SetUp Java Environment
============================================
start cloud9 (amazon linux 2, t2.small or t2.medium. need at least 2GB RAM)

# Ensure Java and Javac (compiler) are installed. 
java -version
javac -version

# If java is not present, then install. Since you are using Cloud9, you wont need to install.
sudo yum -y update
sudo yum -y install java-1.8.0-openjdk-devel # or whichever version you need


Task 2: Setup Maven Project
============================
# Install maven
sudo wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo

cat /etc/yum.repos.d/epel-apache-maven.repo
# Replace $releasever with 6 with below command
sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo

sudo yum install -y apache-maven

mvn -version
Apache Maven 3.5.2 

# create new Java project structure and initialize variables such as artifactId, groupId etc..
mvn archetype:generate -DgroupId=aws.example.s3 -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

# Info about archetypes: https://maven.apache.org/archetypes/index.html 
# Note: Archetype is a Maven project templating toolkit.

# Install tree so that we can get a graphical view of our directory structure
sudo yum install tree -y
tree .  

.
├── pom.xml
├── src
│   ├── main
│   │   └── java
│   │       └── aws
│   │           └── example
│   │               └── s3
│   │                   ├── CopyObject.java
│   │                   ├── ListObjects.java
│   │                   └── PutObject.java
│   └── test
│       └── java
│           └── aws
│               └── example
│                   └── s3
│                       └── AppTest.java
└── test_file_101

11 directories, 6 files

# Lets update the POM file. A Project Object Model or POM is an xml file which gives configuration for 
# your maven project. Ex: what is the name of the war file, version no? where to store the war file etc..
cd ~/environment/my-app
cat pom.xml

# lets replace the default pom.xml file with our pom.xml file which has our project config. 
rm pom.xml (Or mv pom.xml old-pom)

# create new pom.xml
nano pom.xml

# Add the below contents

### Start
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>aws.example.s3</groupId>
  <artifactId>my-app</artifactId>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.0.0</version>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <archive>
            <manifest>
              <mainClass>aws.example.s3.CreateBucket</mainClass>
            </manifest>
          </archive>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
              <goals>
                <goal>single</goal>
              </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk</artifactId>
      <version>1.11.330</version>
    </dependency>
  </dependencies>
  <properties>
      <maven.compiler.source>1.7</maven.compiler.source>
      <maven.compiler.target>1.7</maven.compiler.target>
  </properties>
</project>


Task 3: Create a bucket
=======================
# Goto Code source directory in Mavn project.
cd ~/environment/my-app/src/main/java/aws/example/s3/
# remove the default 'hello world' program.
rm App.java
nano CreateBucket.java

# remove contents and add below. This will add a bucket and delete that as well.

###
package aws.example.s3;
// The package statement specifies to which package the classes defined belongs to.

import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.AmazonS3Exception;
import com.amazonaws.services.s3.model.Bucket;
import com.amazonaws.services.s3.model.CreateBucketRequest;

import com.amazonaws.regions.Regions;
import java.util.List;

public class CreateBucket {

    private static AmazonS3 s3;

    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.format("Usage: <the bucket name> <the AWS Region to use>\n" +
                    "Example: my-test-bucket us-east-2\n");
            return;
        }

        String bucket_name = args[0];
        String region = args[1];

        // Note: ProfileCredentialsProvider() creates a new profile credentials provider that uses the 
        // AWSCredentials from the default profile or profile configuration file.

        s3 = AmazonS3ClientBuilder.standard()
                .withCredentials(new ProfileCredentialsProvider())
                .withRegion(region) // Or .withRegion(Regions.DEFAULT_REGION)
                .build();

        // List current buckets.
        System.out.println("Original List of buckets is here:"); 
        ListMyBuckets();

        // Create the bucket.
        if (s3.doesBucketExistV2(bucket_name)) {
            System.out.format("\nCannot create the bucket. \n" +
                    "A bucket named '%s' already exists.", bucket_name);
            return;
        } else {
            try {
                System.out.format("\nCreating a new bucket named '%s'...\n\n", bucket_name);
                // s3.createBucket(new CreateBucketRequest(bucket_name, region));
                s3.createBucket(bucket_name);
            } catch (AmazonS3Exception e) {
                System.err.println(e.getErrorMessage());
            }
        }

        // Confirm that the bucket was created.
        System.out.println("The revised list of buckets is here:");
        ListMyBuckets();
    }

    private static void ListMyBuckets() {
        // Create a list
        List<Bucket> buckets = s3.listBuckets();

        for (Bucket b : buckets) {
            System.out.println(b.getName());
        }
    }
}

###

# Note: Below URL will give you all methods which are part of S3 client. 
# https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/AmazonS3.html

# go to root directory to compile & build the load
cd ~/environment/my-app
mvn clean package
# If you want debug info, then use -X option. (Ex: mvn clean package -X)

# If you get an error 'Java heap space -> [Help 1]' that is because your Cloud9's EC2 type does not have 
# sufficient RAM. Most likely, you are using t2.micro. Change it to t2.small

# When the build is successful
ls target
ls target/classes/aws/example/s3
# You can see the class created after compilation

# To execute, issue below command
# Note: replace 'unus-bucket-apr04' with your bucket name
java -cp target/my-app-1.0-SNAPSHOT-jar-with-dependencies.jar aws.example.s3.CreateBucket unus-bucket-apr04 us-east-2


Task 4: Delete an existing bucket
=================================
# Lets write a program to delete the bucket
cd ~/environment/my-app/src/main/java/aws/example/s3/
nano DeleteBucket.java

# Copy below contents. This will add a bucket and delete that as well.

###
package aws.example.s3;

import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.AmazonS3Exception;
import com.amazonaws.services.s3.model.Bucket;
import com.amazonaws.services.s3.model.CreateBucketRequest;

import com.amazonaws.regions.Regions;
import java.util.List;

public class DeleteBucket {

    private static AmazonS3 s3;

    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.format("Usage: <the bucket name> <the AWS Region to use>\n" +
                    "Example: my-test-bucket us-east-2\n");
            return;
        }

        String bucket_name = args[0];
        String region = args[1];

        s3 = AmazonS3ClientBuilder.standard()
                .withCredentials(new ProfileCredentialsProvider())
                .withRegion(region)
                .build();

        // List current buckets.
        System.out.println("Original list of buckets:");  
        ListMyBuckets();

        // Delete the bucket.
        try {
            System.out.format("\nDeleting the bucket named '%s'...\n\n", bucket_name);
            s3.deleteBucket(bucket_name);
        } catch (AmazonS3Exception e) {
            System.err.println(e.getErrorMessage());
        }

        // Confirm that the bucket was deleted.
        System.out.println("Revised list of buckets:");  
        ListMyBuckets();
    }

    private static void ListMyBuckets() {
        List<Bucket> buckets = s3.listBuckets();

        for (Bucket b : buckets) {
            System.out.println(b.getName());
        }
    }
}

###

# Now, build the package.
cd ~/environment/my-app
mvn clean package
# You will notice that this time build is faster because a number of dependent packages were already 
# downloaded in the first build

# When the build is successful
ls target
ls target/classes/aws/example/s3
# You can see the class created after compilation

# execute
java -cp target/my-app-1.0-SNAPSHOT-jar-with-dependencies.jar aws.example.s3.DeleteBucket unus-bucket-apr04 us-east-2


Task 5: CleanUp
===============
Go to cloud9 and delete the cloud9


